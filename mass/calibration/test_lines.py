"""
test_lines.py

Test that fluorescence line distributions work.

27 April 2017
Joe Fowler
"""
import unittest
import numpy as np
import scipy as sp
import mass


class Test_MnKA_distribution(unittest.TestCase):
    def setUp(self):
        np.random.seed(44)
        self.distrib = mass.calibration.fluorescence_lines.MnKAlpha

    def test_for_negative_energies(self):
        """Check that no negative energies are generated by a fluorescence line
        distribution. This tests for issue #112.
        """
        values = self.distrib.rvs(size=100000, instrument_gaussian_fwhm=0)
        self.assertLess(0, values.min())

        # This seed definitely caused errors at the time of issue #112.
        np.random.seed(134)
        values = self.distrib.rvs(size=100000, instrument_gaussian_fwhm=0)
        self.assertLess(0, values.min())

    def test_quartiles(self):
        """Check that the quartiles of the generated energies are reasonable."""
        print(self.distrib.__dict__)
        values = self.distrib.rvs(size=100000, instrument_gaussian_fwhm=0)
        quartiles = sp.stats.scoreatpercentile(values, [25, 50, 75])
        self.assertAlmostEqual(quartiles[0], 5888.3, 0)
        self.assertAlmostEqual(quartiles[1] / 1000, 5896.9 / 1000, 2)
        self.assertAlmostEqual(quartiles[2], 5899.0, 0)

    def test_location_against_STANDARD_FEATUES(self):
        for (name, spectrum) in mass.spectra.items():
            if spectrum.element == "AlOx":
                continue
            if spectrum.reference_short in ["NIST ASD", "Clementson 2010", "Nilsen 1995"]:
                continue
            if not spectrum.is_default_material:
                continue
            if "KBeta24" in name:
                continue
            target = mass.STANDARD_FEATURES[name]
            result = np.abs(spectrum.nominal_peak_energy-target) < 0.5
            if not result:
                print("{} spectrum.nominal_peak_energy={}, mass.STANDARD_FEATURES={}, abs diff={}".format(
                    name, spectrum.nominal_peak_energy, target,
                    np.abs(spectrum.nominal_peak_energy-target)))
            self.assertTrue(result)
            # test that basic funtionality works for all instances
            v = spectrum.rvs(1, instrument_gaussian_fwhm=0)
            v = spectrum(spectrum.peak_energy, instrument_gaussian_fwhm=0)
            self.assertIsNotNone(v)
            s = spectrum.reference
            self.assertIsNot(s, "")
            # check that normalize intensities sum to 1
            self.assertAlmostEqual(1, spectrum.normalized_lorentzian_integral_intensity.sum())


class TestAddFitter(unittest.TestCase):
    def test_add_same_line_fails(self):
        mass.calibration.fluorescence_lines.addline(
            element="dummy",
            material="dummy_material",
            linetype="dummy",
            reference_short='NIST ASD',
            fitter_type=mass.line_fits.GenericKBetaFitter,
            reference_plot_instrument_gaussian_fwhm=0.5,
            nominal_peak_energy=(653.679946*2+653.493657*1)/3,
            energies=np.array([653.493657, 653.679946]), lorentzian_fwhm=np.array([0.1, 0.1]),
            reference_amplitude=np.array([1, 2]),
            reference_amplitude_type=mass.LORENTZIAN_PEAK_HEIGHT, ka12_energy_diff=None
        )
        with self.assertRaises(ValueError):
            mass.calibration.fluorescence_lines.addline(
                element="dummy",
                material="dummy_material",
                linetype="dummy",
                reference_short='NIST ASD',
                fitter_type=mass.line_fits.GenericKBetaFitter,
                reference_plot_instrument_gaussian_fwhm=0.5,
                nominal_peak_energy=(653.679946*2+653.493657*1)/3,
                energies=np.array([653.493657, 653.679946]), lorentzian_fwhm=np.array([0.1, 0.1]),
                reference_amplitude=np.array([1, 2]),
                reference_amplitude_type=mass.LORENTZIAN_PEAK_HEIGHT, ka12_energy_diff=None
            )

    def test_intrinsic_sigma(self):
        line = mass.calibration.fluorescence_lines.MnKAlpha
        e = np.linspace(5880, 5910, 31)
        y1 = line(e, instrument_gaussian_fwhm=0)
        y2 = line(e, instrument_gaussian_fwhm=8)
        line.intrinsic_sigma = 8/2.3548
        y3 = line(e, instrument_gaussian_fwhm=0)
        maxdiff = np.abs(y1-y2).max()
        self.assertGreater(maxdiff, 1e-4, "Setting resolution=8 eV should change line")
        maxdiff = np.abs(y1-y3).max()
        self.assertGreater(maxdiff, 1e-4, "Setting instrinsic_sigma to 3.40 eV should change line")
        maxdiff = np.abs(y2-y3).max()
        self.assertLess(
            maxdiff, 1e-5, "Setting resolution=8 eV or intrinsic_sigma=3.40 eV should be equivalent")
        line.intrinsic_sigma = 0.0

    def test_some_lines_make_sense(self):
        self.assertTrue(mass.spectra["MnKAlpha"].nominal_peak_energy == 5898.802)


if __name__ == "__main__":
    unittest.main()
