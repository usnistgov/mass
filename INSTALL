-----------------------------------------------------------------------------
          MASS: The Microcalorimeter Analysis Software Suite

                    Joe Fowler, NIST Boulder Labs

                        November 2010-present
-----------------------------------------------------------------------------
Updated: Sept 28, 2012

CONTENTS
========

* How to download Mass
* How to install Mass
* Possible installation problems
* How to import Mass within Python/Ipython
* Package dependencies
-- Matplotlib preferences
* Eclipse


HOW TO DOWNLOAD MASS
=========================

This depends on whether you are behind the NIST firewall or not.  Users
at the NIST Boulder labs are.  Domestic (U.S.) users can get behind the
firewall using https://inside.nist.gov/ and their RSA key.  International
users (even if they work for NIST) cannot get into the firewall.

Because of these complications, we are storing the Mass Git repository in
two places.  The NIST installation is preferred, but we will do our best
to keep the semi-public repository synchronized with it.  By "semi-public"
I mean that the repository is private, shared only with bitbucket.org
users whom I have approved.  (Perhaps Mass will go public someday??)

For all users, the procedure is to create the directory where you want
to have the mass source live, and the clone a git repository into it.

Inside-NIST users (obviously replace 'fowlerj' with your doc username):

> cd ~/software/awesome_software
> git clone http://fowlerj@doc.bqemd.nist.gov/git/mass.git

Outside users (obviously replace joe_fowler with your bitbucket username):

> cd ~/software/awesome_software
> git clone git@bitbucket.org:joe_fowler/mass.git




HOW TO INSTALL MASS
=========================

Mass is a  mostly Python system for analyzing microcalorimeter data.
A small amount of code has been written in Cython and FORTRAN for the
execution speed advantages of compiled code.

The preferred approach is simply to use python setuptools to 
copy the Mass code to the known, standard install location.  You will
probably need sudo power to do this, but the process is otherwise
very simple.  From the top-level Mass directory (where you find this
file), you need only two commands:

$ python setup.py build
$ sudo python setup.py install

(You could omit the build step, but in that event, it will be done
implicitly while you are sudoing.  The result is that your build
directory gets filled with build files *owned by root*, which is
annoying if not terrible.) 

If you wish to test Mass without installing, or if you wish to play
with the latest edition from subversion, then I suggest that you
modify your PYTHONPATH shell variable.  The Mass code lives in
./mass/ (were "." refers to the location of this INSTALL file).
You just need your PYTHONPATH to point to this.

One problem with running a test version of Mass is that the compiled
extensions do not get built into the "live" tree.  One possible workaround:

$ export PYTHONPATH=${PYTHONPATH}:~/where_i_keep_software/mass/build/lib*/mass/mathstat/

Or another is just to copy the compiled extensions into the live tree:
$ cp build/lib*/mass/mathstat/*so mass/mathstat/ 

Let me know what works for you!


POSSIBLE INSTALLATION PROBLEMS
=========================================
There is no limit to the possibilities!  One I have found, which seems like
it ought to have an obvious solution, is that my setup.py script tends to
install SOME (but not all) of the *.py files as world-readable.  If any
py file is root-owned and world-UNreadable, then you have a problem.

A workaround is to run "sudo chown -R a+rX .../site-packages/mass", but
for this you'll have to figure out where your Python site-packages are.
I believe that the Makefile target "install" does this correctly, so that 
you can just say "make build install".  I have only tested this on macports,
but it ought to work on Linux, too.  "make report_install_location" will
tell you where your python site-packages is located.

Beware that Python can reload pure Python code from the interpreter, e.g., 
"reload(mass.mathstat)".  But it cannot reload compiled code generated
from Cython, C, C++, or FORTRAN.  If you change any Cython or FORTRAN
code, rebuild, and reinstall, then those changes will be invisible to any
python session already in progress.  I'm sorry, but that's a limitation
far above my level of expertise.

With Macports 2.1.2 we have seen the following error when trying to build mass:
mass/mathstat/robust.c:253:10: fatal error: 'numpy/arrayobject.h' file not found
#include "numpy/arrayobject.h"
         ^
1 error generated.

The ugly hack to fix this is to create the following symlink:
ln -s /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/include/numpy/ /opt/local/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7/numpy

Frank believes this is a bug in the cython project. 


HOW TO IMPORT MASS WITHIN PYTHON/IPYTHON
=========================================

>>> import mass




PACKAGE DEPENDENCIES
=====================

Mass has a few required packages, though I expect they are mostly things
that any physicist would already have when using Python for scientific
work:

o- numpy
o- scipy
o- matplotlib (a.k.a. pylab)
o- cython
o- gcc with gfortran
o- Qt4 (optional) 
o- PyQt4 (optional)

The Qt4 packages are optional in the sense that the optional GUI is
built on PyQt4.  You can certainly use mass without the GUI, in which
case the matplotlib plotting package is free to use a non-Qt backend.
I would not do this is you don't have to.  As of late April 2012, I
finally added a few useful GUI components.  I hope more will come in time.

I am sure that Mass uses certain features of each package that are
only available starting with certain version numbers.  Unfortunately,
I have no idea what they are.  I can say that at the time of this
writing (September 28, 2012), my own computer uses versions: 

o- python     2. 7.3
o- ipython    0.13.1
o- numpy      1. 6.2
o- scipy      0.11.0 (as of July 12 2013.  This available in Ubuntu starting with 13.  Otherwise try anaconda) 
o- matplotlib 1. 1.1
o- cython	  0.17.0
o- PyQt4      4. 9.4
o- Qt4        4. 8.3
o- gcc        4. 7.1  (known to work with gcc 4.5, too)

If you're using macports and lack a C compiler, or if your compiler
is not "selected", then you might want one or both of these commands,
without which Rob Horansky noted (November 2011) that he could not 
install Mass:

$ sudo port install gcc47
$ sudo port select gcc mp-gcc47




    Matplotlib preferences
    ---------------------------

The Qt4 GUI features will conflict with your matplotlib GUI
unless you are using Qt4 as your "backend" for matplotlib.  You can
specify this by using the following line in your configuration file,
which is generally ~/.matplotlib/matplotlibrc :

backend     : Qt4Agg

Here are some other things I find very useful in that file but which
have nothing to do with Mass:

interactive : True
keymap.grid : g                     # switching on/off a grid in current axes
keymap.yscale : l                   # toggle scaling of y-axes ('log'/'linear')
keymap.xscale : L, k                # toggle scaling of x-axes ('log'/'linear')


ECLIPSE
=======

To work on the Fortran90 code in Mass, you might want to find Photran, a FORTRAN 
back end for Eclipse.  See
http://wiki.eclipse.org/PTP/photran/documentation/photran7installation
