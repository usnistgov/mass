"""
test_lines.py

Test that fluorescence line distributions work.

27 April 2017
Joe Fowler
"""
import unittest
import numpy as np
import scipy as sp
import mass


class Test_MnKA_distribution(unittest.TestCase):
    def setUp(self):
        np.random.seed()
        self.distrib = mass.calibration.fluorescence_lines.MnKAlpha()

    def test_for_negative_energies(self):
        """Check that no negative energies are generated by a fluorescence line
        distribution. This tests for issue #112.
        """
        values = self.distrib.rvs(size=100000)
        self.assertLess(0, values.min())

        # This seed definitely caused errors at the time of issue #112.
        np.random.seed(134)
        values = self.distrib.rvs(size=100000)
        self.assertLess(0, values.min())

    def test_quartiles(self):
        """Check that the quartiles of the generated energies are reasonable."""
        values = self.distrib.rvs(size=100000)
        quartiles = sp.stats.scoreatpercentile(values, [25, 50, 75])
        self.assertAlmostEqual(quartiles[0], 5888.3, 0)
        self.assertAlmostEqual(quartiles[1] / 1000, 5896.9 / 1000, 2)
        self.assertAlmostEqual(quartiles[2], 5899.0, 0)

    def test_location_against_STANDARD_FEATUES(self):
        for (name, spectrum_class) in mass.spectrum_classes.items():
            if spectrum_class.element == "AlOx" or spectrum_class.reference_short == "NIST ASD" or spectrum_class.reference_short == "Clementson 2010" or spectrum_class.reference_short == "Nilsen 1995":
                continue
            result = np.abs(spectrum_class.nominal_peak_energy-mass.STANDARD_FEATURES[name]) < 0.5
            if not result:
                print("{} spectrum_class.nominal_peak_energy={}, mass.STANDARD_FEATURES={}, abs diff={}".format(
                    name, spectrum_class.nominal_peak_energy, mass.STANDARD_FEATURES[name],
                    np.abs(spectrum_class.nominal_peak_energy-mass.STANDARD_FEATURES[name])))
            self.assertTrue(result)
            # test that basic funtionality works for all instances
            spectrum = spectrum_class()
            v = spectrum.rvs(1)
            v = spectrum(spectrum.peak_energy)
            self.assertIsNotNone(v)
            s = spectrum.reference
            self.assertIsNot(s, "")
            # check that normalize intensities sum to 1
            self.assertAlmostEqual(1, spectrum.normalized_lorentzian_integral_intensity.sum())


if __name__ == "__main__":
    unittest.main()
