#!/usr/bin/env python

"""
Truncate all LJH files that match a pattern to contain only the first N pulse records.
Write the truncated data to a new (set of) LJH file(s).
"""

import argparse
import re
import mass
from mass.core.ljh_util import filename_glob_expand


def main():
    parser = argparse.ArgumentParser(description='Truncate a set of LJH files')
    parser.add_argument('pattern',
                        type=str,
                        help='basename of files to process, e.g. 20171116_152922')
    parser.add_argument('out',
                        type=str,
                        help='string to append to basename when creating output filename')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--npulses',
                       type=int,
                       help='Number of pulses to keep')
    group.add_argument('--timestamp',
                       type=float,
                       help='Keep only pulses before this timestamp')
    args = parser.parse_args()

    pattern = f"{args.pattern}_chan*.ljh"

    filenames = filename_glob_expand(pattern)

    for in_fname in filenames:
        ch = re.search(r"chan(\d+)\.ljh", in_fname).groups()[0]
        out_fname = f"{args.pattern}_{args.out}_chan{ch}.ljh"
        mass.core.ljh_modify.ljh_truncate(
            in_fname, out_fname, n_pulses=args.npulses, timestamp=args.timestamp)


if __name__ == '__main__':
    main()
